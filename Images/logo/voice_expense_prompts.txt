‚úÖ Final Lovable Prompt ‚Äî Manual Expense Creation & Month Association Logic

üõ†Ô∏è Task: Update logic for adding new manual expenses to align with the correct selected month, but preserve realistic timestamps for UI display and consistency.

üéØ Problem:
- When a user is viewing an older month (e.g., "May 2024") and adds a new expense:
  - The system currently defaults to either:
    - The current date and month (e.g., "2025-06-23") ‚Üí ‚ùå wrong group
    - Or incorrectly shifts edited expenses into the current month ‚Üí ‚ùå loss of historical intent

‚úÖ Required Behavior:

1Ô∏è‚É£ On Manual Expense Creation:
- Use the selected month_id (e.g., "2024-05") for grouping
- Create a created_at timestamp that:
  - Uses the current day and time, but
  - Forces the month/year to match the selected month_id

Example:
- Today is June 23, 2025
- User is viewing May 2024
- User adds a new expense manually

‚úÖ Result:
- month_id: "2024-05"
- created_at: "2024-05-23T10:41:00Z" (i.e., today‚Äôs day & time in selected month)

This ensures:
- Expenses appear in the month the user was viewing
- The UI shows a familiar recent-looking day (e.g., "23rd"), not a fake old timestamp

2Ô∏è‚É£ On Editing an Expense:
- Preserve both month_id and created_at as-is unless explicitly modified

üß† Supabase Implementation Tips:
- On insert, build created_at as:
```ts
const selectedMonth = "2024-05";
const today = new Date();
const day = today.getDate().toString().padStart(2, '0');
const time = today.toTimeString().split(' ')[0];
const createdAt = `${selectedMonth}-${day}T${time}Z`; // e.g., "2024-05-23T14:30:00Z"
```
- Store that in created_at, and separately store month_id = "2024-05"

‚úÖ Goal:
- Users can add expenses into any month
- Expenses appear instantly under the correct group
- Timestamps reflect today‚Äôs context, making entries feel recent and relevant even in older months


--------------------------------------------------------------------------------

‚úÖ Final Lovable Prompt ‚Äî Free Voice to Structured Expense (AI Agent + API)

üõ†Ô∏è Goal: Implement a complete free voice-to-expense AI system that allows users to speak expenses (e.g., ‚ÄúI spent 50 euros on groceries today‚Äù) and automatically logs:
- Value (e.g., 50)
- Currency (e.g., EUR)
- Category (e.g., groceries)
- Description (e.g., bought groceries at Carrefour)
- User ID + Timestamp

‚úÖ Step 1: Frontend ‚Äî Record Voice Note
- Add mic button
- Record audio (React Native)
- Convert audio to webm or wav
- Send to Supabase Edge Function:
```ts
await fetch("https://<project>.supabase.co/functions/v1/process-voice", {
  method: "POST",
  headers: { Authorization: `Bearer ${token}`, "Content-Type": "audio/webm" },
  body: audioFile
});
```

‚úÖ Step 2: Edge Function ‚Äî Transcribe Audio (Free API)
Option A: OpenAI Whisper
```ts
const form = new FormData();
form.append("file", audioFile);
form.append("model", "whisper-1");
const res = await fetch("https://api.openai.com/v1/audio/transcriptions", {
  method: "POST",
  headers: { Authorization: `Bearer ${OPENAI_API_KEY}` },
  body: form
});
const { text } = await res.json();
```

‚úÖ Step 3: Use GPT to Extract Data
```ts
const systemPrompt = "Extract value, currency, category, and description from this voice input. Return JSON.";
const userPrompt = "I spent 50 euros on coffee at Starbucks";
const response = await fetch("https://api.openai.com/v1/chat/completions", {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
    Authorization: `Bearer ${OPENAI_API_KEY}`
  },
  body: JSON.stringify({
    model: "gpt-3.5-turbo",
    messages: [
      { role: "system", content: systemPrompt },
      { role: "user", content: userPrompt }
    ],
    temperature: 0.2
  })
});
const result = await response.json();
const parsed = JSON.parse(result.choices[0].message.content);
```

‚úÖ Output:
```json
{
  "amount": 50,
  "currency": "EUR",
  "category": "coffee",
  "description": "coffee at Starbucks"
}
```

‚úÖ Step 4: Save in Supabase
```ts
await supabase.from("expenses").insert({
  user_id,
  amount: parsed.amount,
  currency: parsed.currency,
  category: parsed.category,
  description: parsed.description,
  month_id: getMonthIdFromDate(new Date()),
  created_at: new Date()
});
```

‚úÖ Step 5: Display in UI
- Show in /dashboard under correct month
- Fallback: show user message if transcription fails

üîê Store API keys in Edge Function environment variables
